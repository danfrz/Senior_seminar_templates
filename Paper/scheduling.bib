@inproceedings{Lozi:2016,
author = {Lozi, Jean-Pierre and Lepers, Baptiste and Funston, Justin and Gaud, Fabien and Qu{\'e}ma, Vivien and Fedorova, Alexandra},
title = {The Linux Scheduler: A Decade of Wasted Cores},
booktitle = {Proceedings of the Eleventh European Conference on Computer Systems},
series = {EuroSys '16},
year = {2016},
isbn = {978-1-4503-4240-7},
location = {London, United Kingdom},
pages = {1:1--1:16},
articleno = {1},
numpages = {16},
url = {http://doi.acm.org.ezproxy.morris.umn.edu/10.1145/2901318.2901326},
doi = {10.1145/2901318.2901326},
acmid = {2901326},
publisher = {ACM},
address = {New York, NY, USA},
}

@INPROCEEDINGS{NisarEtal:2017,
author={U. B. Nisar and M. Aleem and M. A. Iqbal and N. S. Vo},
booktitle={2017 International Conference on Recent Advances in Signal Processing, Telecommunications Computing (SigTelCom)},
title={Jumbler: A lock-contention aware thread scheduler for multi-core parallel machines},
year={2017},
pages={77-81},
keywords={cache storage;multi-threading;multiprocessing systems;operating system kernels;parallel machines;scheduling;Jumbler;application source-code;application-threads distribution;cache-coherent multicore multiprocessor parallel machine;high-lock contention;last-level cache misses;lock-contention aware thread scheduler;lock-contention threads;multithreaded application;operating system kernel;program execution;shuffling;Benchmark testing;Instruction sets;Message systems;Multicore processing;Processor scheduling;Sockets;Lock-contention;multi-cores;performance analysis;scheduling;thread-migration},
doi={10.1109/SIGTELCOM.2017.7849799},
month={Jan},}

@INPROCEEDINGS{KumarEtal:2014,
author={K. Kumar and P. Rajiv and G. Laxmi and N. Bhuyan},
booktitle={2014 23rd International Conference on Parallel Architecture and Compilation Techniques (PACT)},
title={Shuffling: A framework for lock contention aware thread scheduling for multicore multiprocessor systems},
year={2014},
pages={289-300},
keywords={cache storage;multi-threading;multiprocessing systems;operating system kernels;processor scheduling;source code (software);64-core Supermicro server;LLC miss;OS kernel;Oracle Solaris 11;Shuffling;Sockets;application source code;cache-coherent multicore multiprocessor system;critical section;critical section processing;last-level cache misses;lock acquisition latency;lock contention aware thread scheduling;lock transfer frequency;multithreaded application;multithreaded program;operating systems;shared data accesses;thread distribution;Image edge detection;Instruction sets;Kernel;Multicore processing;Multiprocessing systems;Sockets;Multicore;last-level cache misses;lock contention;scheduling;thread migration},
doi={10.1145/2628071.2628074},
month={Aug},}


@MISC{WikiThreads,
   author = "Wikipedia",
   title = "Thread (computing) --- {Wikipedia, The Free Encyclopedia}",
   year = "2017",
   url = "https://en.wikipedia.org/wiki/Thread_(computing)",
   note = "[Online; accessed 10-October-2017]"   
}

@MISC{WikiContext,
   author = "Wikipedia",
   title = "Context switch --- {Wikipedia, The Free Encyclopedia}",
   year = "2017",
   url = "https://en.wikipedia.org/wiki/Context_switch",
   note = "[Online; accessed 11-October-2017]"   
}